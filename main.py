import sqlite3
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from datetime import datetime, timedelta
import pytz
import json
import asyncio
import logging
from aiogram.exceptions import TelegramRetryAfter

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='[%(asctime)s] %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS draft_laws
                 (id TEXT PRIMARY KEY, title TEXT, status TEXT, timestamp TEXT)''')
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def insert_draft_law(id, title, status):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–∞–∑—É"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO draft_laws (id, title, status, timestamp) VALUES (?, ?, ?, ?)",
                  (id, title, status, datetime.now().isoformat()))
        conn.commit()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç: ID={id}")
    except sqlite3.IntegrityError:
        logger.info(f"‚ö†Ô∏è –ó–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç —Å ID={id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
    conn.close()


def get_all_draft_laws():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM draft_laws")
    rows = c.fetchall()
    conn.close()
    return rows


def clear_db():
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM draft_laws")
    count = c.fetchone()[0]
    c.execute("DELETE FROM draft_laws")
    conn.commit()
    conn.close()
    if count > 0:
        logger.info(f"üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π")


async def parse_website():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–≤ –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û–ö–í–≠–î '–≠–∫–æ–ª–æ–≥–∏—è'"""

    logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –û–ö–í–≠–î '–≠–∫–æ–ª–æ–≥–∏—è'...")

    all_projects = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
    lookback_date = datetime.now() - timedelta(days=DAYS_TO_LOOK_BACK)

    logger.info(f"üìÖ –ò—â—É –ø—Ä–æ–µ–∫—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ {lookback_date.strftime('%d.%m.%Y')}")

    try:
        for page in range(1, PAGES_TO_FETCH + 1):
            logger.info(f"üìÉ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}/{PAGES_TO_FETCH}")

            search_params = {
                "mnemonic": "Npa_AreaRegulation_Grid",
                "sort": "Date-desc",
                "page": page,
                "pageSize": PROJECTS_PER_PAGE,
                "filter": {
                    "searchString": "",
                    "statusId": None,
                    "typeId": None,
                    "kindId": None,
                    "departmentId": None,
                    "npaAreaRegulation": True,
                    "excludeProjectsArchive": True,
                    "excludeProjectsDevArchive": True
                }
            }

            response = requests.post(API_URL, headers=HTTP_HEADERS, json=search_params)
            logger.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {response.status_code}")

            if response.status_code == 200:
                try:
                    data = response.json()
                    projects = data.get("Data", [])
                    logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {len(projects)}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
                    has_recent_projects = False
                    for project in projects:
                        pub_date_str = project.get("PublishDate")
                        if pub_date_str:
                            pub_date = datetime.strptime(pub_date_str, "%d.%m.%Y %H:%M:%S")
                            if pub_date >= lookback_date:
                                all_projects.append(project)
                                has_recent_projects = True
                            else:
                                # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–µ–∫—Ç
                                logger.info(f"üìÖ –ü—Ä–æ–ø—É—Å–∫–∞—é —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø—Ä–æ–µ–∫—Ç –æ—Ç {pub_date_str}")

                    # –ï—Å–ª–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –±—ã–ª–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                    if not has_recent_projects:
                        logger.info(f"üìÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {DAYS_TO_LOOK_BACK} –¥–Ω–µ–π, –ø—Ä–µ–∫—Ä–∞—â–∞—é –ø–∞—Ä—Å–∏–Ω–≥")
                        break

                    # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(SLEEP_BETWEEN_API_REQUESTS)

                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {str(e)}")
                    continue
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code} –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
                continue

        # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
        logger.info(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {DAYS_TO_LOOK_BACK} –¥–Ω–µ–π: {len(all_projects)}")

        # –û—á–∏—â–∞–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        clear_db()
        logger.info("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")

        eco_projects_count = 0

        for project in all_projects:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –û–ö–í–≠–î —Å –≠–∫–æ–ª–æ–≥–∏–µ–π
            is_eco = False
            project_id = str(project.get("ID", ""))

            # –°–º–æ—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ –≤ –ø–æ–ª–µ Okveds –∏ –∏—â–µ–º Title —Å–æ —Å–ª–æ–≤–æ–º "–≠–∫–æ–ª–æ–≥–∏—è"
            okveds = project.get('Okveds', [])
            for okved in okveds:
                okved_title = okved.get('Title', '')
                if "—ç–∫–æ–ª–æ–≥" in okved_title.lower():
                    is_eco = True
                    logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç {project_id}: –ù–∞–π–¥–µ–Ω –ø–æ –û–ö–í–≠–î '–≠–∫–æ–ª–æ–≥–∏—è': {okved_title}")
                    break

            # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç–∫–æ–ª–æ–≥–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            if is_eco:
                eco_projects_count += 1
                title = project.get("Title", "")
                status_code = str(project.get("Status", "0"))

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                status_text = STATUS_MAP.get(status_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

                pub_date = project.get("PublishDate", "")
                creator = project.get('CreatorDepartmentReal', {}).get('Title', '')

                logger.info(f"   ID: {project_id}")
                logger.info(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                logger.info(f"   –°—Ç–∞—Ç—É—Å: {status_text} (–∫–æ–¥ {status_code})")
                logger.info(f"   –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {creator}")
                logger.info(f"   –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {pub_date}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
                insert_draft_law(project_id, title, status_text)

        logger.info(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {eco_projects_count}")

        if eco_projects_count > 0:
            logger.info(f"üì• –î–æ–±–∞–≤–ª–µ–Ω–æ {eco_projects_count} —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–≤")
        else:
            logger.info("üì• –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


async def send_to_channel():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–Ω–∞–ª"""
    draft_laws = get_all_draft_laws()

    if not draft_laws:
        logger.info("üì§ –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å - –±–∞–∑–∞ –ø—É—Å—Ç–∞")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        lookback_date = (datetime.now() - timedelta(days=DAYS_TO_LOOK_BACK)).strftime('%d.%m.%Y')
        today = datetime.now().strftime('%d.%m.%Y')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        header = (
            f"‚ö°Ô∏è –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ ({lookback_date} - {today}) ‚ö°Ô∏è\n\n"
            f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(draft_laws)} —à—Ç."
        )
        await bot.send_message(chat_id=CHANNEL_ID, text=header)
        logger.info(f"üì§ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {len(draft_laws)} –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–≤")

        # –ñ–¥–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        await asyncio.sleep(SLEEP_AFTER_HEADER)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç
        for law in draft_laws:
            while True:
                try:
                    project_id = law[0]
                    title = law[1]
                    status = law[2]

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç
                    project_url = f"https://regulation.gov.ru/projects#npa={project_id}"

                    message = (
                        f"üìå <b>{title}</b>\n\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
                        f"üÜî ID: <code>{project_id}</code>\n"
                        f"üîó <a href='{project_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç</a>"
                    )
                    await bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode="HTML",
                                           disable_web_page_preview=True)
                    await asyncio.sleep(SLEEP_BETWEEN_MESSAGES)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    break
                except TelegramRetryAfter as e:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(e.retry_after)
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                    await asyncio.sleep(5)
                    break

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        footer = "‚úÖ –û—Ç—á–µ—Ç –ø–æ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω."
        await bot.send_message(chat_id=CHANNEL_ID, text=footer)

        # –û—á–∏—â–∞–µ–º –±–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        clear_db()
        logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –±–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")


@dp.message(Command("all"))
async def cmd_all(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /all"""
    draft_laws = get_all_draft_laws()

    if not draft_laws:
        await message.answer("‚ö°Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ ‚ö°Ô∏è")
        return

    await message.answer(f"‚ö°Ô∏è –í—Å–µ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç—ã –≤ –±–∞–∑–µ ({len(draft_laws)} —à—Ç.) ‚ö°Ô∏è")

    for law in draft_laws:
        msg = (
            "=================\n"
            f"üìå ID: {law[0]}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {law[1]}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {law[2]}\n"
            "================="
        )
        await message.answer(msg)
        await asyncio.sleep(0.5)


@dp.message(Command("parse"))
async def cmd_parse(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse - —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–≤...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    await parse_website()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    draft_laws = get_all_draft_laws()

    if draft_laws:
        await message.answer(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(draft_laws)} –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    else:
        await message.answer("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@dp.message(Command("send"))
async def cmd_send(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send - —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª"""
    await message.answer(f"üì§ –ó–∞–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await send_to_channel()

    await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def periodic_sending():
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–Ω–∞–ª –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è
            current_day = datetime.now().weekday()
            current_hour = datetime.now().hour
            current_minute = datetime.now().minute

            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è
            if current_day == SEND_DAY_OF_WEEK and current_hour == SEND_HOUR and current_minute < 5:
                logger.info(
                    f"üìÜ {['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][SEND_DAY_OF_WEEK]}, {SEND_HOUR}:00 - –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞!")

                # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –ø–µ—Ä–∏–æ–¥
                await parse_website()

                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await send_to_channel()

                # –ñ–¥–µ–º 23 —á–∞—Å–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —ç—Ç–æ—Ç –∂–µ –¥–µ–Ω—å
                logger.info("‚è≥ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 23 —á–∞—Å–∞")
                await asyncio.sleep(23 * 60 * 60)
            else:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                days_until_send_day = (SEND_DAY_OF_WEEK - current_day) % 7

                if days_until_send_day == 0 and current_hour >= SEND_HOUR:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
                    days_until_send_day = 7

                hours_until_send = (24 * days_until_send_day) - current_hour + SEND_HOUR
                if days_until_send_day == 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
                    hours_until_send = SEND_HOUR - current_hour

                logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ~{hours_until_send} —á–∞—Å–æ–≤")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
                await asyncio.sleep(CHECK_INTERVAL_HOURS * 60 * 60)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await asyncio.sleep(ERROR_SLEEP_TIME)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(periodic_sending())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())